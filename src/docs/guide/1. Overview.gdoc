
This plugin creates a list view for any SQL query results.


The developer can:
* Define the query behind the list view.
* Define the columns that will appear.

Your users can:
* Infinite-scroll through the results.
* Rearrange the column, and thier settings are persisted.
* Filter data for each column.

h2. Quick Start

In your bootstrap.groovy file, add the following

{code}
import customview.*

class BootStrap {

	def sessionFactory
	def servletContext

	def init = { servletContext ->

		// generate some test data by loading the address.csv file
		// into our database

		def database = new groovy.sql.Sql(sessionFactory.currentSession.connection())

		// create the schema

		def query = """
		create table addresses(
			id int primary key,
			zip varchar(20), 
			city varchar(50), 
			street varchar(200), 
			state varchar(50), 
			created_at datetime);
		"""

		database.executeUpdate query

		// load the records

		query = """
			insert into addresses (id, zip, city, street, state, created_at)
			values (:id, :zip, :city, :street, :state, :createdAt)
		"""

		new File(servletContext.getRealPath("addresses.csv")).eachLine { String line ->

			def fields = line.split(",")

			database.executeInsert(query, [
				zip: 		fields[0],
				city: 		fields[1],
				street: 	fields[2],
				id: 		fields[3],
				state: 		fields[4],
				createdAt: 	new Date(fields[5])
			])
		}

		// create the view

		View view = new View(
			name:"addresses", 
			fetchSize:50,
			url:"jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000", 
			username:"sa", 
			password:"", 
			driver:"org.h2.Driver")

		// add the table names

		view.addToTables name:"addresses"

		// add the column names
		
		def sequence = 0

		view.addToColumns name:"ID", code:"addresses.id", type:"NUMBER", sequence: sequence++
		view.addToColumns name:"Street", code:"addresses.street", type:"STRING", sequence: sequence++
		view.addToColumns name:"City", code:"addresses.city", type:"STRING", sequence: sequence++
		view.addToColumns name:"State", code:"addresses.state", type:"STRING", sequence: sequence++
		view.addToColumns name:"Zip", code:"addresses.zip", type:"STRING", sequence: sequence++
		view.addToColumns name:"Date Created", code:"addresses.created_at", type:"DATE", sequence: sequence++
		
		view.save()


	}

	def destroy = {
	}

}


{code}

create a controller 

{code}
class AddressController {

	def index() {
		redirect action:"list"
	}

	def list() {
		[:] 
	}

}
{code}



In the addressController view, add the customview taglib

{code}
<specteam:customView name="addresses"/>
{code}

